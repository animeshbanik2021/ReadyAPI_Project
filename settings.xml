<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="587317ef-d048-4d94-8340-65d9583c5041" created="3.9.2" activeEnvironment="Default environment" name="API_Automation_Framework" updated="3.9.2" encryptionMode="Not encrypted" runType="SEQUENTIAL" resourceRoot="" compositeProjectFormat="1.3" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="IncludeOverview">true</con:setting>
    <con:setting id="IncludeResults">true</con:setting>
    <con:setting id="FlowLayout">false</con:setting>
    <con:setting id="ErrorDetails">true</con:setting>
    <con:setting id="IncludeCoverage">true</con:setting>
    <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerUIAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Settings File Password" value=""/>
  <con:entry key="Report Format(s)" value="XML"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Slack Channel(s)" value=""/>
  <con:entry key="Add Settings" value="true"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Test Suite Tags" value=""/>
  <con:entry key="Select Report Type" value="JUnit-Style report for automation"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Test Suite" value="BaseTestSuit"/>
  <con:entry key="Run in-process" value="false"/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Test Case Tags" value=""/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Test Case" value="BaseTestCase"/>
  <con:entry key="Slack Access Token" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Username" value=""/>
  <con:entry key="TestRunner Path" value="C:\Program Files\SmartBear\ReadyAPI-3.9.2\bin"/>
  <con:entry key="Environment" value="No Environment"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="true"/>
  <con:entry key="Root Folder" value="${WORKSPACE}"/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="true"/>
</xml-fragment>]]></con:setting>
    <con:setting id="587317ef-d048-4d94-8340-65d9583c5041fileName">API_Automation_Framework2</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:requirements/>
  <con:properties>
    <con:property>
      <con:name>Azure_URL</con:name>
      <con:value>https://dev-api.ctcorporation.com/platform/app-setting/v1/secrets?applicationName=ct&amp;secretName=ClientId&amp;sectionName=APIAutomationTests</con:value>
    </con:property>
    <con:property>
      <con:name>CT-API-KEY</con:name>
      <con:value>c30eac22be304b1985b36cb168c8e4db</con:value>
    </con:property>
    <con:property>
      <con:name>Ocp-Apim-Subscription-Key</con:name>
      <con:value>c30eac22be304b1985b36cb168c8e4db</con:value>
    </con:property>
    <con:property>
      <con:name>Environment</con:name>
      <con:value>Dev</con:value>
    </con:property>
    <con:property>
      <con:name>Token_URL</con:name>
      <con:value>//ct-oauth2provider-app-mule/token?client_id={{client_id}}&amp;client_secret={{client_secret}}&amp;grant_type={{grant_type}}</con:value>
    </con:property>
    <con:property>
      <con:name>token</con:name>
      <con:value>Atrc_GEi1LD7TcNDt98rWj8rVPAI-zsiCagj0qOix3hNQ3uJ1nHuLn6DgFltBp9Tz9sqC8CmlKQrAWrax_J6nw</con:value>
    </con:property>
    <con:property>
      <con:name>base_URL_Dev</con:name>
      <con:value>http://lb-ct-dev.lb.anypointdns.net</con:value>
    </con:property>
    <con:property>
      <con:name>client_id</con:name>
      <con:value>b59f4a6f424747c48416dcdf4c89d777</con:value>
    </con:property>
    <con:property>
      <con:name>client_secret</con:name>
      <con:value>C5C2ee9648BA4013a80255894eD34Bd2</con:value>
    </con:property>
    <con:property>
      <con:name>grant_type</con:name>
      <con:value>CLIENT_CREDENTIALS</con:value>
    </con:property>
    <con:property>
      <con:name>correlationId</con:name>
      <con:value>TestCorrelationid123</con:value>
    </con:property>
  </con:properties>
  <con:wssContainer/>
  <con:databaseConnectionContainer/>
  <con:jmsConnectionContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:beforeRunScript>import static com.eviware.soapui.impl.wsdl.teststeps.registry.HttpRequestStepFactory.HTTPREQUEST_TYPE
import com.eviware.soapui.support.editor.inspectors.auth.TokenType
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.support.XmlHolder
import jxl.*
import jxl.write.*
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

//--------------------------------------------------------Environment Selection----------------------------------------------------------------------------------------------------------------
def Env=testRunner.testCase.testSuite.project.getPropertyValue( "Environment")
def CT_API_Key
def Ocp_Apim_Subscription

switch (Env)
{
case "Dev":
        CT_API_Key=testRunner.testCase.testSuite.project.getPropertyValue( "CT-API-Key")
        Ocp_Apim_Subscription=testRunner.testCase.testSuite.project.getPropertyValue( "Ocp-Apim-Subscription-Key")
  break
case "QA":
       log.info "found that shouldn't be found"
  break
default:
       log.info "doesn't work"
}

// *************************************Get Value from Azure Devops for Client id*************************

if (Env="Dev")
{
def method_1 = "GET"
def EndPonit_URL_1=testRunner.testCase.testSuite.project.getPropertyValue( "Azure_URL" )
log.info(EndPonit_URL_1)
def headers_1 = new StringToStringMap()
headers_1.put("CT-API-Key",CT_API_Key)
headers_1.put("Ocp-Apim-Subscription-Key",Ocp_Apim_Subscription)
def stepName_1 = "GetValueFromAzureDevops"
def tc_1 = testRunner.testCase
def tbr_1 = tc_1.getTestStepByName(stepName_1)
if (tbr_1 != null) { 
  tc_1.removeTestStep(tbr_1)
}
tc_1.addTestStep(HTTPREQUEST_TYPE , stepName_1, EndPonit_URL_1, method_1)
testRunner.testCase.getTestStepByName(stepName_1).testRequest.setRequestHeaders(headers_1)
testRunner.runTestStepByName(stepName_1)
def response_azure=testRunner.testCase.getTestStepByName(stepName_1).testRequest.response.responseContent
def json_azur = new groovy.json.JsonSlurper().parseText(response_azure)
def result=json_azur.result
String[] str
String[] val
str = result.split(' ')
for( String values : str ){
//log.info(values)
     val = values.split(':')
     def val1=val[0]
     def val2=val[1]
     log.info("*****")
     log.info(val1)
     log.info(val2)
     testRunner.testCase.testSuite.project.setPropertyValue(val1,val2)
}
testRunner.testCase.testSuite.project.setPropertyValue("base_URL_Dev","http://lb-ct-dev.lb.anypointdns.net")
}

//-------------------------------------------------AuthenTication Token generation-------------------------------------------------

def method1 = "POST"
def Token_URL=testRunner.testCase.testSuite.project.getPropertyValue( "base_URL_Dev" ) +testRunner.testCase.testSuite.project.getPropertyValue("Token_URL")
def Client_ID=testRunner.testCase.testSuite.project.getPropertyValue("client_id")
def Client_Secret=testRunner.testCase.testSuite.project.getPropertyValue("client_secret")
def grant_type=testRunner.testCase.testSuite.project.getPropertyValue("grant_type")
def base_URL=Token_URL

def stepName1 = "Authetication_Token_Generate_New"
def tc1=testRunner.testCase
def tbr = tc1.getTestStepByName(stepName1)
if (tbr != null) { 
  tc1.removeTestStep(tbr)
}
tc1.addTestStep(HTTPREQUEST_TYPE , stepName1, base_URL, method1)
context.testCase.getTestStepByName(stepName1).setPropertyValue("client_id", Client_ID)
context.testCase.getTestStepByName(stepName1).setPropertyValue("client_secret", Client_Secret)
context.testCase.getTestStepByName(stepName1).setPropertyValue("grant_type", grant_type)
testRunner.runTestStepByName(stepName1)
def response=testRunner.testCase.getTestStepByName(stepName1).testRequest.response.responseContent
def json = new groovy.json.JsonSlurper().parseText(response)
log.info(json.access_token)
testRunner.testCase.testSuite.project.setPropertyValue("token", json.access_token)


////-------------------------------------------------Getting Value from Excel Sheet----------------------------------------------------------------------------------------------
//
FileInputStream fis = new FileInputStream("D:\\Users\\ANIMESH.BANIK\\Desktop\\US Story_Sprint\\ReadyAPI\\API Testcases.xlsx");
       XSSFWorkbook workbook = new XSSFWorkbook(fis);
       XSSFSheet sheet = workbook.getSheet("Sheet1");
       XSSFSheet sh=workbook.getSheetAt(0);
       int rowCount = sh.getLastRowNum();
       XSSFRow row = sheet.getRow(0);
       int colNum = row.getLastCellNum();
       log.info( rowCount)
         int stratcol =0
                    def TestSuit_Name
                    def TestCase_Name
                    def TestSuit_Name1
                    def JSON_File

for (int i=1;i&lt;rowCount + 1  ;i++)
                {
               stratcol =0   
                    def cellval=sheet.getRow(i).getCell(stratcol).getStringCellValue()
   
                       if(cellval != "N/A")
			            {
			                TestSuit_Name1=sheet.getRow(i).getCell(stratcol).getStringCellValue()                 
			            	  TestSuit_Name=context.testCase.testSuite.project.addNewTestSuite(TestSuit_Name1) 
			            }

			 stratcol =1
                      cellval=sheet.getRow(i).getCell(stratcol).getStringCellValue()
                       if(cellval != "N/A")
			            {
			               TestCase_Name=sheet.getRow(i).getCell(stratcol).getStringCellValue()                 
			               TestSuit_Name.addNewTestCase(TestCase_Name)
			            }
                stratcol =2
                              def Step_Name =sheet.getRow(i).getCell(stratcol).getStringCellValue()
                              def End_Point1=sheet.getRow(i).getCell(stratcol+1).getStringCellValue()
                              def base_url_1=testRunner.testCase.testSuite.project.getPropertyValue( "base_URL_Dev" ) + End_Point1
						def HTTP_Verb=sheet.getRow(i).getCell(stratcol + 2).getStringCellValue()
						cellval=sheet.getRow(i).getCell(stratcol + 3).getStringCellValue()
						if(cellval !="")
						{
							 JSON_File=sheet.getRow(i).getCell(stratcol + 3).getStringCellValue()
						}
                                    log.info(TestSuit_Name)
                                    log.info(TestCase_Name)
                                    
						     def tc = testRunner.testCase.testSuite.project.getTestSuiteByName(TestSuit_Name1).getTestCaseByName(TestCase_Name)
						     def tbr1 = tc.getTestStepByName(Step_Name)
									    if (tbr1 != null) 
									    { 
									          tc.removeTestStep(tbr1)
                                                 }
					                              tc.addTestStep(HTTPREQUEST_TYPE , Step_Name, base_url_1, HTTP_Verb)                                                                                  
					                              tc.getTestStepByName(Step_Name).testRequest.setRequestContent(JSON_File)
					                              tc.getTestStepByName(Step_Name).testRequest.setMediaType('application/json')
					                              def token="Bearer " + testRunner.testCase.testSuite.project.getPropertyValue("token")
											def headers = new StringToStringMap()
											headers.put("Authorization",token)
											tc.getTestStepByName(Step_Name).testRequest.setRequestHeaders(headers)
											// Check the Status code
											def Expected_StatusCode=sheet.getRow(i).getCell(stratcol + 4).getStringCellValue()
											def Check_Header=sheet.getRow(i).getCell(stratcol + 5).getStringCellValue()
					
											def tCase = testRunner.testCase.testSuite.getTestCaseByName(TestCase_Name)
											def tStep = tCase.getTestStepByName(Step_Name)
//                              tStep.run(testRunner, context)

                                                       def testStep = testRunner.testCase.testSuite.project.getTestSuiteByName(TestSuit_Name1).getTestCaseByName(TestCase_Name).getTestStepByName(Step_Name)

                              testStep.run(testRunner, context)
			// Get the Response

				def response2 = testStep.testRequest.response.contentAsString
                    log.info(response2)

						stratcol =6
						for(int j=stratcol; j&lt;11; j++)
						{
						  def ExpectedVal1=sheet.getRow(i).getCell(j).getStringCellValue()
						  assert{previousResponse.contains('ExpectedVal1')
						}
						}
		}
//workbook.close</con:beforeRunScript>
  <con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest">
    <con:script>// Sample event script to add custom HTTP header to all outgoing REST, SOAP and HTTP(S) calls
// This code is often used for adding custom authentication to ReadyAPI functional tests

// If hardcoding the token, uncomment and change line 5
// token = '4567'

// If your token is parameterized in Project level custom property, uncomment line 8
// token = request.parent.testCase.testSuite.project.getProperty('auth_token').getValue()

// To modify all outgoing calls, remove comments from lines 11 to 16
// headers = request.requestHeaders
// if (headers.containsKey('auth_token2') == false) {
//   headers.put('auth_token2', token)
//   request.requestHeaders = headers
// }</con:script>
  </con:eventHandlers>
  <con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep">
    <con:script>// Save all test step results into files
// Change the directory path in line 5 to a location where you want to store details
// then uncomment lines 5 to 10

// filePath = 'C:\\tempOutputDirectory\\'
// fos = new java.io.FileOutputStream(filePath + testStepResult.testStep.label + '.txt', true)
// pw = new java.io.PrintWriter(fos)
// testStepResult.writeTo(pw)
// pw.close()
// fos.close()</con:script>
  </con:eventHandlers>
  <con:authRepository/>
  <con:tags/>
</con:soapui-project>
